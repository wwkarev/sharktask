# Generated by Django 4.2.4 on 2023-08-26 07:51

from django.db import migrations
from django.db.migrations import RunPython

status_type_info_list = [
    {
        "name": "ToDo",
    },
    {
        "name": "InProgress",
    },
    {
        "name": "Done",
    },
]


def create_basic_status_types(apps, schema_editor):
    StatusType = apps.get_model("shark_task_workflow", "StatusType")
    for status_type_info in status_type_info_list:
        StatusType.objects.create(name=status_type_info["name"])


status_info_list = [
    {
        "status_type_name": "ToDo",
        "name": "ToDo",
    },
    {
        "status_type_name": "InProgress",
        "name": "InProgress",
    },
    {
        "status_type_name": "Done",
        "name": "Done",
    },
]


def create_basic_statuses(apps, schema_editor):
    StatusType = apps.get_model("shark_task_workflow", "StatusType")
    Status = apps.get_model("shark_task_workflow", "Status")
    for status_info in status_info_list:
        status_type = StatusType.objects.get(name=status_info["status_type_name"])
        Status.objects.create(status_type=status_type, name=status_info["name"])


def create_basic_workflow(apps, schema_editor):
    Status = apps.get_model("shark_task_workflow", "Status")
    Transition = apps.get_model("shark_task_workflow", "Transition")
    Workflow = apps.get_model("shark_task_workflow", "Workflow")

    todo_status = Status.objects.get(name="ToDo")
    in_progress_status = Status.objects.get(name="InProgress")
    done_status = Status.objects.get(name="Done")

    workflow = Workflow.objects.create(name="Basic workflow")
    Transition.objects.create(
        name="Initial", workflow=workflow, src_status=None, dest_status=todo_status, is_initial=True
    )
    Transition.objects.create(
        name="In progress", workflow=workflow, src_status=todo_status, dest_status=in_progress_status, is_initial=False
    )
    Transition.objects.create(
        name="Done", workflow=workflow, src_status=in_progress_status, dest_status=done_status, is_initial=False
    )
    Transition.objects.create(
        name="Stop progress",
        workflow=workflow,
        src_status=in_progress_status,
        dest_status=todo_status,
        is_initial=False,
    )
    Transition.objects.create(
        name="Undone", workflow=workflow, src_status=done_status, dest_status=todo_status, is_initial=False
    )


field_info_list = [
    {
        "key": "description",
        "name": "Description",
        "field_type_key": "text",
    },
    {
        "key": "reporter",
        "name": "Reporter",
        "field_type_key": "user_picker",
    },
    {
        "key": "assignee",
        "name": "Assignee",
        "field_type_key": "user_picker",
    },
]


def create_basic_fields(apps, schema_editor):
    FieldType = apps.get_model("shark_task_fields", "FieldType")
    Field = apps.get_model("shark_task_fields", "Field")
    for field_info in field_info_list:
        field_type = FieldType.objects.get(key=field_info["field_type_key"])
        Field.objects.create(key=field_info["key"], name=field_info["name"], field_type=field_type)


class Migration(migrations.Migration):

    dependencies = [
        ("shark_task_workflow", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            create_basic_status_types,
            reverse_code=RunPython.noop,
            elidable=True,
        ),
        migrations.RunPython(
            create_basic_statuses,
            reverse_code=RunPython.noop,
            elidable=True,
        ),
        migrations.RunPython(
            create_basic_workflow,
            reverse_code=RunPython.noop,
            elidable=True,
        ),
    ]
